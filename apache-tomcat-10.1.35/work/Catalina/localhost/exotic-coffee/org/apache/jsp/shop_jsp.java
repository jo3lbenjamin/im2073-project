/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.35
 * Generated at: 2025-03-13 02:56:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public final class shop_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Shop | Exotic Coffee</title>\r\n");
      out.write("    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./stylesheets/general-sans.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./stylesheets/index.css\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-gray-100\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Navbar -->\r\n");
      out.write("    <nav class=\"fixed top-0 left-0 w-full flex justify-between items-center px-6 py-4 text-black z-10\">\r\n");
      out.write("        <a href=\"index.jsp\" class=\"text-2xl font-bold\">Exotic Coffee.</a>\r\n");
      out.write("        <ul class=\"flex space-x-6\">\r\n");
      out.write("            <li><a href=\"index.jsp\" class=\"font-semibold hover:text-gray-500\">HOME</a></li>\r\n");
      out.write("            <li><a href=\"shop.jsp\" class=\"font-semibold text-gray-500\">SHOP</a></li>\r\n");
      out.write("            <li><a href=\"about.jsp\" class=\"font-semibold hover:text-gray-500\">ABOUT US</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("\r\n");
      out.write("    <!-- Featured Product Section -->\r\n");
      out.write("    <section class=\"py-16 general-sans text-center\">\r\n");
      out.write("        <h3 class=\"text-3xl font-bold mb-6\">Shop Our Exclusive Selection</h3>\r\n");
      out.write("        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-6 px-6\">\r\n");
      out.write("            \r\n");
      out.write("            ");
  
                int page = 1;
                int productsPerPage = 8; // Number of products per page

                if (request.getParameter("page") != null) {
                    page = Integer.parseInt(request.getParameter("page"));
                }
                
                int start = (page - 1) * productsPerPage; // Calculate offset

                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/exotic_coffee_shop", "root", "Transcom#188");

                    // Get products with pagination
                    String sql = "SELECT * FROM products LIMIT ? OFFSET ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setInt(1, productsPerPage);
                    stmt.setInt(2, start);
                    ResultSet rs = stmt.executeQuery();

                    while (rs.next()) {
            
      out.write("\r\n");
      out.write("                    <div class=\"bg-white p-4 rounded-md shadow-lg\">\r\n");
      out.write("                        <img src=\"");
      out.print( rs.getString("image_url") );
      out.write("\" style=\"height: 300px; object-fit: cover;\" class=\"w-full rounded-md\" alt=\"Coffee\">\r\n");
      out.write("                        <h4 class=\"text-lg font-semibold mt-2\">");
      out.print( rs.getString("name") );
      out.write("</h4>\r\n");
      out.write("                        <p class=\"text-gray-600\">Origin: ");
      out.print( rs.getString("origin") );
      out.write("</p>\r\n");
      out.write("                        <p class=\"text-gray-600\">Roast: ");
      out.print( rs.getString("roast_level") );
      out.write("</p>\r\n");
      out.write("                        <p class=\"text-gray-800 font-bold\">Price: $");
      out.print( rs.getDouble("price") );
      out.write("</p>\r\n");
      out.write("                        <button class=\"mt-4 bg-black text-white py-2 px-4 rounded hover:bg-gray-700\">Add to Cart</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("            ");
  
                    }
                    
                    // Get total product count for pagination
                    String countSql = "SELECT COUNT(*) FROM products";
                    PreparedStatement countStmt = conn.prepareStatement(countSql);
                    ResultSet countRs = countStmt.executeQuery();
                    countRs.next();
                    int totalProducts = countRs.getInt(1);
                    int totalPages = (int) Math.ceil(totalProducts / (double) productsPerPage);

                    conn.close();
                } catch (Exception e) {
                    out.println("<p>Error fetching coffee data.</p>");
                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("    <!-- Pagination -->\r\n");
      out.write("    <div class=\"flex justify-center mt-8\">\r\n");
      out.write("        ");
 if (page > 1) { 
      out.write("\r\n");
      out.write("            <a href=\"shop.jsp?page=");
      out.print( page - 1 );
      out.write("\" class=\"mx-2 px-4 py-2 bg-gray-300 rounded hover:bg-gray-400\">Previous</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        ");
 for (int i = 1; i <= totalPages; i++) { 
      out.write("\r\n");
      out.write("            <a href=\"shop.jsp?page=");
      out.print( i );
      out.write("\" class=\"mx-2 px-4 py-2 ");
      out.print( (i == page) ? "bg-black text-white" : "bg-gray-300 hover:bg-gray-400" );
      out.write(" rounded\">");
      out.print( i );
      out.write("</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        ");
 if (page < totalPages) { 
      out.write("\r\n");
      out.write("            <a href=\"shop.jsp?page=");
      out.print( page + 1 );
      out.write("\" class=\"mx-2 px-4 py-2 bg-gray-300 rounded hover:bg-gray-400\">Next</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Footer -->\r\n");
      out.write("    <footer class=\"bg-black text-white general-sans text-center py-6 mt-12\">\r\n");
      out.write("        <p>&copy; IM2073 Project | Joel & Chretienne.</p>\r\n");
      out.write("    </footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
